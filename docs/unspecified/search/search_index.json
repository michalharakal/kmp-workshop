{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kotlin/Native and Multiplatform Workshop \u00b6 Javaland 2023, Mittwoch 22.03.2023 | 14:30 - 17:30 | Community Room Community activity workshop Michal Harakal, Alexander von Below Workhop materials and code \u00b6 With the advancement of digitization, the demand for human-machine interface applications in various industrial sectors is also growing. They should not only be safe, reliable and slim \u2013 they should also be modern, good-looking and networked. In this hands-on workshop, we'll build a simple JVM desktop app that communicates with a real device and look at the strengths of Kotlin and Kotlin Multiplatform. We will learn how to easily support multiple platforms (desktop and mobile, especially with a focus on Apple operating systems) without compromising, how Kotlin and the JVM work well together and how declarative UI frameworks, such as Jetpack Compose and Swift UI, are the kind and changing the way responsive user interfaces are designed today. Learning goals \u00b6 How to set up a multiplatform project How to use Kotlin Multiplatform to build a desktop application How to use Kotlin Multiplatform to build a mobile application How to display data from a real device with declarative UI frameworks(Jetpack Compose and Swift UI) Setup the environment \u00b6 See detailed instructions in the setup section. Codelabs \u00b6 Warning This material is still under a heavy development. It is not yet complete and may contain errors. We are looking forward to meet you in a person at Javaland 2023. Code labs are split into separated branches. Consequent branches are based on previous ones. If you have any problems or just want to skip over to the next step, simply check the next branch. Every clean checkout branch should build and run from the command line. In Particular, learning steps are split into separated branches. Start here Codelabs Note Because of switching between the branches, build configurations and dependencies may be changed. Sometimes it is necessary to clean the project and/or restart the IDE. If this does not help, try to delete the .idea and .gradle folder and restart the IDE.","title":"Kotlin/Native and Multiplatform Workshop"},{"location":"#kotlinnative-and-multiplatform-workshop","text":"Javaland 2023, Mittwoch 22.03.2023 | 14:30 - 17:30 | Community Room Community activity workshop Michal Harakal, Alexander von Below","title":"Kotlin/Native and Multiplatform Workshop"},{"location":"#workhop-materials-and-code","text":"With the advancement of digitization, the demand for human-machine interface applications in various industrial sectors is also growing. They should not only be safe, reliable and slim \u2013 they should also be modern, good-looking and networked. In this hands-on workshop, we'll build a simple JVM desktop app that communicates with a real device and look at the strengths of Kotlin and Kotlin Multiplatform. We will learn how to easily support multiple platforms (desktop and mobile, especially with a focus on Apple operating systems) without compromising, how Kotlin and the JVM work well together and how declarative UI frameworks, such as Jetpack Compose and Swift UI, are the kind and changing the way responsive user interfaces are designed today.","title":"Workhop materials and code"},{"location":"#learning-goals","text":"How to set up a multiplatform project How to use Kotlin Multiplatform to build a desktop application How to use Kotlin Multiplatform to build a mobile application How to display data from a real device with declarative UI frameworks(Jetpack Compose and Swift UI)","title":"Learning goals"},{"location":"#setup-the-environment","text":"See detailed instructions in the setup section.","title":"Setup the environment"},{"location":"#codelabs","text":"Warning This material is still under a heavy development. It is not yet complete and may contain errors. We are looking forward to meet you in a person at Javaland 2023. Code labs are split into separated branches. Consequent branches are based on previous ones. If you have any problems or just want to skip over to the next step, simply check the next branch. Every clean checkout branch should build and run from the command line. In Particular, learning steps are split into separated branches. Start here Codelabs Note Because of switching between the branches, build configurations and dependencies may be changed. Sometimes it is necessary to clean the project and/or restart the IDE. If this does not help, try to delete the .idea and .gradle folder and restart the IDE.","title":"Codelabs"},{"location":"bios/","text":"Wer wir sind **Michal Harakal** Nach einer langen Karriere als Software Entwickler, zuletzt in einer Rolle als Android Entwickler, ist Michal auf seinem Weg zum Datenwissenschaftler und arbeitet derzeit als Machine Learning Engineer bei der Deutschen Telekom AG. Sein Werkzeugkasten, in dem JVM und Kotlin einen besonderen Platz haben, ist vielseitig gef\u00fcllt. Michal teilt gerne seine Erfahrung, ist im Open-Source-Projekten aktiv und organisiert Data Science Python Study Group Meetup. **Alexander von Below** hat schon vor 30 Jahren Software f\u00fcr den Apple Macintosh geschrieben und seit 2008 Apps f\u00fcr das iPhone. Er war Geburtshelfer der ersten iPhone-Apps der Deutschen Telekom AG und ist dort heute Lead Software Architect. Er lebt in K\u00f6ln und blutet Ger\u00fcchten zufolge in den sechs Farben des alten Apple-Logos.","title":"Who we are"},{"location":"codelab-1/","text":"Create your first app that works both on Android and iOS with the IDE \u00b6 The goal of this codelab is to create a simple app that works on Android and iOS. We start by creating the app from the wizard. This step also makes sure, that working environment is set properly. See setup section for details. Create a new project \u00b6 Start with a new project from the wizard. In case that KMM plugin is not installed, you can select App name \u00b6 Name: IotExplorer Package name: iot.explorer Multiplatform Module \u00b6 Hint Important ist to select CocoaPods as a dependency manager. Initially, it takes some time until projects imports and builds. After the project is created, you can simply run it on Android or iOS simulator. Lets have a look on the project structure. commonMain \u00b6 expect fun getPlatform (): Platform androidMain \u00b6 class AndroidPlatform : Platform { override val name : String = \"Android ${ android . os . Build . VERSION . SDK_INT } \" } actual fun getPlatform (): Platform = AndroidPlatform () iosMain \u00b6 import platform.UIKit.UIDevice class IOSPlatform : Platform { override val name : String = UIDevice . currentDevice . systemName () + \" \" + UIDevice . currentDevice . systemVersion } actual fun getPlatform (): Platform = IOSPlatform () Hint IOS platform highlits the possibility to use platform specific libraries. In this case, we use UIKit framework to get information about the device. Result \u00b6 Android \u00b6 iOS \u00b6 If you want check an expected results, checkout [codelab 1 Branch](( https://github.com/michalharakal/kmp-workshop/tree/javaland2023/codelab-1/javaland2023/codelab/iot-explorer )","title":"Part 1: First app"},{"location":"codelab-1/#create-your-first-app-that-works-both-on-android-and-ios-with-the-ide","text":"The goal of this codelab is to create a simple app that works on Android and iOS. We start by creating the app from the wizard. This step also makes sure, that working environment is set properly. See setup section for details.","title":"Create your first app that works both on Android and iOS with the IDE"},{"location":"codelab-1/#create-a-new-project","text":"Start with a new project from the wizard. In case that KMM plugin is not installed, you can select","title":"Create a new project"},{"location":"codelab-1/#app-name","text":"Name: IotExplorer Package name: iot.explorer","title":"App name"},{"location":"codelab-1/#multiplatform-module","text":"Hint Important ist to select CocoaPods as a dependency manager. Initially, it takes some time until projects imports and builds. After the project is created, you can simply run it on Android or iOS simulator. Lets have a look on the project structure.","title":"Multiplatform Module"},{"location":"codelab-1/#commonmain","text":"expect fun getPlatform (): Platform","title":"commonMain"},{"location":"codelab-1/#androidmain","text":"class AndroidPlatform : Platform { override val name : String = \"Android ${ android . os . Build . VERSION . SDK_INT } \" } actual fun getPlatform (): Platform = AndroidPlatform ()","title":"androidMain"},{"location":"codelab-1/#iosmain","text":"import platform.UIKit.UIDevice class IOSPlatform : Platform { override val name : String = UIDevice . currentDevice . systemName () + \" \" + UIDevice . currentDevice . systemVersion } actual fun getPlatform (): Platform = IOSPlatform () Hint IOS platform highlits the possibility to use platform specific libraries. In this case, we use UIKit framework to get information about the device.","title":"iosMain"},{"location":"codelab-1/#result","text":"","title":"Result"},{"location":"codelab-1/#android","text":"","title":"Android"},{"location":"codelab-1/#ios","text":"If you want check an expected results, checkout [codelab 1 Branch](( https://github.com/michalharakal/kmp-workshop/tree/javaland2023/codelab-1/javaland2023/codelab/iot-explorer )","title":"iOS"},{"location":"codelab-2/","text":"Add a desktop app to your project \u00b6 You can start directly here by cloning the results from previous step codelab 1 Branch Adding a desktop app as a new module \u00b6 Fix gradle.build.kts \u00b6 Plugins \u00b6 use Kotlin Multiplatform plugin and plugin for Compose Multiplatform plugins { kotlin ( \"multiplatform\" ) id ( \"org.jetbrains.compose\" ) version \"1.3.0\" } Dependencies \u00b6 define JVM as one and only mutltiplatform target add dependencies for shared code add compose dependencies kotlin { jvm { jvmToolchain ( 11 ) withJava () } sourceSets { val jvmMain by getting { dependencies { implementation ( project ( \":shared\" )) implementation ( compose . desktop . currentOs ) } } val jvmTest by getting } } Note Now we have a new source set jvmMain and jvmTest for JVM specific code. Also adapt folder structure to match new source set. Note Add kotlin.native.cacheKind=none to gradle.properties to avoid caching issues with Compose Multiplatform Result \u00b6 If you want check an expected results, checkout codelab 2 Branch","title":"Part 2: JVM Desktop"},{"location":"codelab-2/#add-a-desktop-app-to-your-project","text":"You can start directly here by cloning the results from previous step codelab 1 Branch","title":"Add a desktop app to your project"},{"location":"codelab-2/#adding-a-desktop-app-as-a-new-module","text":"","title":"Adding a desktop app as a new module"},{"location":"codelab-2/#fix-gradlebuildkts","text":"","title":"Fix gradle.build.kts"},{"location":"codelab-2/#plugins","text":"use Kotlin Multiplatform plugin and plugin for Compose Multiplatform plugins { kotlin ( \"multiplatform\" ) id ( \"org.jetbrains.compose\" ) version \"1.3.0\" }","title":"Plugins"},{"location":"codelab-2/#dependencies","text":"define JVM as one and only mutltiplatform target add dependencies for shared code add compose dependencies kotlin { jvm { jvmToolchain ( 11 ) withJava () } sourceSets { val jvmMain by getting { dependencies { implementation ( project ( \":shared\" )) implementation ( compose . desktop . currentOs ) } } val jvmTest by getting } } Note Now we have a new source set jvmMain and jvmTest for JVM specific code. Also adapt folder structure to match new source set. Note Add kotlin.native.cacheKind=none to gradle.properties to avoid caching issues with Compose Multiplatform","title":"Dependencies"},{"location":"codelab-2/#result","text":"If you want check an expected results, checkout codelab 2 Branch","title":"Result"},{"location":"codelab-3/","text":"Add business logic to your project \u00b6 You can start directly here by cloning the results from previous step codelab 2 Branch Notes on software architecture \u00b6 Blocks in the image are grouped by columns into the following 3 layers: presentation domain data Additional dependencies \u00b6 Couroutines Android Lifecycle for handling in ViewModel Result \u00b6 TBD If you want check an expected results, checkout codelab 3 Branch","title":"Part 3: Business logic"},{"location":"codelab-3/#add-business-logic-to-your-project","text":"You can start directly here by cloning the results from previous step codelab 2 Branch","title":"Add business logic to your project"},{"location":"codelab-3/#notes-on-software-architecture","text":"Blocks in the image are grouped by columns into the following 3 layers: presentation domain data","title":"Notes on software architecture"},{"location":"codelab-3/#additional-dependencies","text":"Couroutines Android Lifecycle for handling in ViewModel","title":"Additional dependencies"},{"location":"codelab-3/#result","text":"TBD If you want check an expected results, checkout codelab 3 Branch","title":"Result"},{"location":"codelab-4/","text":"Show me the data, adding views to your project \u00b6 You can start directly here by cloning the results from previous step codelab 3 Branch Additional dependencies \u00b6 Jetpack Compose iOS \u00b6 Result \u00b6 If you want check an expected results, checkout codelab 4 Branch","title":"Part 4: Views"},{"location":"codelab-4/#show-me-the-data-adding-views-to-your-project","text":"You can start directly here by cloning the results from previous step codelab 3 Branch","title":"Show me the data, adding views to your project"},{"location":"codelab-4/#additional-dependencies","text":"Jetpack Compose","title":"Additional dependencies"},{"location":"codelab-4/#ios","text":"","title":"iOS"},{"location":"codelab-4/#result","text":"If you want check an expected results, checkout codelab 4 Branch","title":"Result"},{"location":"codelab-5/","text":"Add a real device to your project \u00b6 You can start directly here by cloning the results from previous step codelab 4 Branch Additional dependencies \u00b6 mqtt TBD Result \u00b6 TBD If you want check an expected results, checkout codelab 5 Branch","title":"Part 5: Live values"},{"location":"codelab-5/#add-a-real-device-to-your-project","text":"You can start directly here by cloning the results from previous step codelab 4 Branch","title":"Add a real device to your project"},{"location":"codelab-5/#additional-dependencies","text":"mqtt TBD","title":"Additional dependencies"},{"location":"codelab-5/#result","text":"TBD If you want check an expected results, checkout codelab 5 Branch","title":"Result"},{"location":"codelabs/","text":"Codelabs \u00b6 Part 1 \u2013 Create your first app that works both on Android and iOS with the IDE Part 2 \u2013 Add a desktop app to your project Part 3 \u2013 Add business logic to your project Part 4 \u2013 Show me the data, adding views to your project Part 4 \u2013 Add a real device to your project","title":"Codelabs"},{"location":"codelabs/#codelabs","text":"Part 1 \u2013 Create your first app that works both on Android and iOS with the IDE Part 2 \u2013 Add a desktop app to your project Part 3 \u2013 Add business logic to your project Part 4 \u2013 Show me the data, adding views to your project Part 4 \u2013 Add a real device to your project","title":"Codelabs"},{"location":"setup/","text":"Set up an environment \u00b6 Prerequisites \u00b6 Note To write iOS-specific or macOS-specific code and run it as a native iOS or macOS application on a simulated or real device, you'll need a Mac with macOS. This cannot be performed on other operating systems, such as Microsoft Windows. This is an Apple requirement. Install the required software \u00b6 Android Studio \u00b6 Recommended : Current version of Android Studio Android Studio Electric Eel | 2022.1.1 Patch 2 (as for 17.3.2023 ) IntelliJ Plugin Kotlin Multiplatform Mobile IntelliJ Plugin Compose Multiplatform IDE Support KMM Plugin \u00b6 Compose Multiplatform IDE Support \u00b6 Note Also make sure that Android SDK has been installed. Android SDK can be installed via menu item Tools->Android->SDK Manager IntelliJ IDEA \u00b6 Warning Current version of IntelliJ IDEA will work probably as well, but is not tested yet with this workshop. Hint If you want just try out Compose Multiplatform just with Desktop JVM on IntelliJ IDEA, you can simply follow official guide Guide for getting started with Compose Multiplatform Warning Because of incompatible versions of Kotlin and Kotlin plugin, IntelliJ IDEA will not work properly with this workshop. You can try bet Version of Android Gradle Plugin. plugins { id(\"com.android.application\").version(\"7.4.0-beta02\").apply(false) id(\"com.android.library\").version(\"7.4.0-beta02\").apply(false) kotlin(\"android\").version(\"1.8.0\").apply(false) kotlin(\"multiplatform\").version(\"1.8.0\").apply(false) id(\"org.jetbrains.compose\").version(\"1.3.0\").apply(false) } iOS and macOS \u00b6 Xcode 14 or later is required to develop for iOS. A (free) Apple Developer account is required to deploy onto a device. We recommend to install the TouchLab Kotlin Plugin for Xcode by running: brew install xcode-kotlin","title":"Setup"},{"location":"setup/#set-up-an-environment","text":"","title":"Set up an environment"},{"location":"setup/#prerequisites","text":"Note To write iOS-specific or macOS-specific code and run it as a native iOS or macOS application on a simulated or real device, you'll need a Mac with macOS. This cannot be performed on other operating systems, such as Microsoft Windows. This is an Apple requirement.","title":"Prerequisites"},{"location":"setup/#install-the-required-software","text":"","title":"Install the required software"},{"location":"setup/#android-studio","text":"Recommended : Current version of Android Studio Android Studio Electric Eel | 2022.1.1 Patch 2 (as for 17.3.2023 ) IntelliJ Plugin Kotlin Multiplatform Mobile IntelliJ Plugin Compose Multiplatform IDE Support","title":"Android Studio"},{"location":"setup/#kmm-plugin","text":"","title":"KMM Plugin"},{"location":"setup/#compose-multiplatform-ide-support","text":"Note Also make sure that Android SDK has been installed. Android SDK can be installed via menu item Tools->Android->SDK Manager","title":"Compose Multiplatform IDE Support"},{"location":"setup/#intellij-idea","text":"Warning Current version of IntelliJ IDEA will work probably as well, but is not tested yet with this workshop. Hint If you want just try out Compose Multiplatform just with Desktop JVM on IntelliJ IDEA, you can simply follow official guide Guide for getting started with Compose Multiplatform Warning Because of incompatible versions of Kotlin and Kotlin plugin, IntelliJ IDEA will not work properly with this workshop. You can try bet Version of Android Gradle Plugin. plugins { id(\"com.android.application\").version(\"7.4.0-beta02\").apply(false) id(\"com.android.library\").version(\"7.4.0-beta02\").apply(false) kotlin(\"android\").version(\"1.8.0\").apply(false) kotlin(\"multiplatform\").version(\"1.8.0\").apply(false) id(\"org.jetbrains.compose\").version(\"1.3.0\").apply(false) }","title":"IntelliJ IDEA"},{"location":"setup/#ios-and-macos","text":"Xcode 14 or later is required to develop for iOS. A (free) Apple Developer account is required to deploy onto a device. We recommend to install the TouchLab Kotlin Plugin for Xcode by running: brew install xcode-kotlin","title":"iOS and macOS"}]}